grammar priede
{
    options{
        Axiom = "root";
        Separator = "SEPARATOR";
    }
    terminals{
        WHITE_SPACE -> U+0020 | U+0009 | U+000B | U+000C;
        LineTerminator  -> U+000D /* CR */
						|  U+000A /* LF */
						|  U+000D U+000A /* CR LF */
						|  U+2028 /* LS */
						|  U+2029 /* PS */ ;

        CommentLine		-> '//' (.* - (.* LineTerminator .*)) LineTerminator 
                        | '//' (.* - (.* LineTerminator .*));
		CommentBlock	-> '/*' (.* - (.* '*/' .*)) '*/' ;
        SEPARATOR   -> (WHITE_SPACE | CommentLine | CommentBlock | LineTerminator)+;

        ID -> [a-zA-ZēūīāšģķļžčņĒĪĀŠĢĶĻŽČŅ_]+ | [a-zA-ZēūīāšģķļžčņĒĪĀŠĢĶĻŽČŅ_]+[1-9] | [a-zA-ZēūīāšģķļžčņĒĪĀŠĢĶĻŽČŅ_]+[1-9]*;
        
        QUOTE -> '"';
        INTEGER -> [1-9] [0-9]* | '0' ;
        
        NUMBER -> INTEGER | INTEGER','INTEGER;
        //NUMBER -> INTEGER | '-' INTEGER | INTEGER','INTEGER | '-' INTEGER','INTEGER;
        
        

        STRING	-> '"' (
							(. - ('"' | LineTerminator | '\\'))
							| '\\' LineTerminator
							| '\\' ('\'' | '"' | '\\' | [bfnrtv])
							| '\\x' [0-9a-fA-F]{2}
							| '\\u' [0-9a-fA-F]{4}
							| '\\0'
						)* '"' |
                        '\'' (
							(. - ('\'' | LineTerminator | '\\'))
							| '\\' LineTerminator
							| '\\' ('\'' | '"' | '\\' | [bfnrtv])
							| '\\x' [0-9a-fA-F]{2}
							| '\\u' [0-9a-fA-F]{4}
							| '\\0'
						)* '\'' ;
		
        CITADI -> 'citādi';
        ARRAY -> 'saraksts';
        RETURN -> 'atgriezt';
        INCLUDE -> 'iekļaut';
        FROM -> 'no';
        EXPORT -> 'eksp';
        OBJECT -> 'objekts';
    }
    rules{
        //BOOL_DEF -> 'būls'! | 'bl'!;
        //TEXT -> 'teksts'! | 'tk'!;
        //NUM -> 'sk'! | 'skaitlis'!;
        //FLOAT -> 'decim'!;
        


        TRUE -> 'PAT'! | 'PATIESS'!;
        FALSE -> 'NEPAT'! | 'NEPATIESS'!;
        BOOL -> TRUE | FALSE;

        array -> ID '['! exp ']'!;

        include_list -> '{'! ID+ '}'!;

        include -> INCLUDE! include_list FROM STRING;

        array_def -> ID ARRAY  ID ':'! '['! array_def_value ']'!
                | ID ARRAY  ID ':'! '['! ']'!;

        var_def -> ID ID ':'! var_def_value
                | array_def^
                | EXPORT ID ID ':'! var_def_value
                | EXPORT array_def^;

        array_def_value -> var_def_value
                |var_def_value (';'! var_def_value)*;

        var_def_value -> exp^ ;

        asignable_exp -> exp^;
        assign_op -> ':'^ | '+:'^ | '-:'^ | '*:'^ | '/:'^;

        id_assign -> ID assign_op asignable_exp
                    |   ID '++' | ID '--' ;

        array_assign -> array ':'! asignable_exp;

        func_name -> ID^;

        func_call -> func_name '('! funcargs ')'!
                   | func_name '()'! ;

        

        funcarg -> exp^;

        funcargs -> funcarg|funcarg (';'! funcarg)*;

        


        comp_s ->    exp_t '=' exp_t
                   | exp_t '>' exp_t
                   | exp_t '>=' exp_t
                   | exp_t '<' exp_t
                   | exp_t '<=' exp_t
                   | exp_t '!=' exp_t;


        if -> 'ja'! exp '{'! block '}'!
            | 'ja'! exp '{'! block '}'! CITADI '{'! block '}'!;

        s_loop -> 'atkārtot'! exp '{'! block '}'!;

        w_loop -> 'kamēr'! exp '{'! block '}'!;
        
        arg -> ID ID;
        func_def_args -> arg|arg (';'! arg)*;

        func_return_type -> ID;

        func_def -> 'funkc'! ID '('! func_def_args ')'! '->'! func_return_type '{'! block '}'!
                   | 'funkc'! ID '()'! '->'! func_return_type  '{'! block '}'!
                   | EXPORT'funkc'! ID '('! func_def_args ')'! '->'! func_return_type  '{'! block '}'!
                   | EXPORT'funkc'! ID '()'! '->'! func_return_type  '{'! block '}'!
                   | 'funkc'! ID '('! func_def_args ')'! '{'! block '}'!
                   | 'funkc'! ID '()'! '{'! block '}'!
                   | EXPORT'funkc'! ID '('! func_def_args ')'! '{'! block '}'!
                   | EXPORT'funkc'! ID '()'! '{'! block '}'!;

        return_st -> RETURN  exp;

        dotable ->  NUMBER^
                   | STRING^
                   |  ID^
                   |  func_call^
                   | BOOL^
                   | array^
                   | object^;

        exp_atom_no_dot -> NUMBER^
                   | STRING^
                   | '('! exp^ ')'! 
                   |  ID^
                   |  func_call^
                   | BOOL^
                   | array^
                   | object^;

        exp_atom -> exp_atom_no_dot^
                    | dot_call^;

        dot_call -> dotable '.'! ID
                | dot_call '.'! ID
                | dot_call_fn^;

        dot_call_fn -> 
                  dotable '.'! ID '()'!
                | dotable '.'! ID '('! funcargs ')'!
                | dot_call '.'! ID '()'!
                | dot_call '.'! ID '('! funcargs ')'!;

        exp_reizdal -> exp_atom^
                   | reiz_dal_atl^;
        
        reiz_dal_atl -> 
                    reiz^|dal^|atlik^;

        reiz -> exp_reizdal '*'! exp_atom;
        dal -> exp_reizdal '/'! exp_atom;
        atlik -> exp_reizdal '%'! exp_atom;

        exp_plusmin -> exp_reizdal^
                   |  plus^
                   |  minus^;

        plus -> exp_plusmin '+'! exp_reizdal;
        minus -> exp_plusmin '-'! exp_reizdal;

        exp_t ->      
                exp_plusmin^;



        exp_a -> exp_t^|comp_s^;

        xvai -> exp_a 'xvai'! exp_a | exp_a^;

        vai -> xvai ('vai'! xvai)+ | xvai^;

        un -> vai ('un'! vai)+ | vai^;

        exp -> un^;


        multiple_ids -> ID | ID (';'! ID)*;

        multiple_id_define -> '{'! multiple_ids '}'! ':'! exp;

        object_field -> ID ':'! exp;
        object_def_field -> ID ':'! ID;
        
        object -> '{'! object_field* '}'!;
        object_def -> OBJECT! ID '{'! object_def_field* '}'!;


        stat -> var_def^ 
        | multiple_id_define^ 
        | func_call^ 
        | if^ 
        | id_assign^ 
        | array_assign^ 
        | s_loop^ 
        | w_loop^ 
        | func_def^ 
        | return_st^
        | dot_call^
        | include^
        | object_def^;

        block -> stat*;
        root ->  block^;
    }
}